Create a Python program using only the tkinter, math, numpy, dataclasses, typing, and sys libraries
to simulate 20 numbered balls bouncing inside a rotating heptagon. The program should be
contained within a single Python file.

**I. Display and Environment:**

1.  **Canvas Setup:**
    *   Use `tkinter` to create a window.
    *   Window Title: "Bouncing Balls in Spinning Heptagon"
    *   Canvas Size: 800x800 pixels.
    *   Canvas Background Color: Black (`#000000`).
    *   Target Frame Rate (FPS): 60 FPS. Calculate delta time (`dt`) for physics updates accordingly (e.g., `dt = 1/60`).

2.  **Coordinate System:**
    *   The center of the canvas (400, 400) should be considered the origin (0,0) for physics calculations.
    *   Y-axis should point upwards for physics (gravity acts in -Y), but remember tkinter's Y-axis points downwards for drawing.

**II. Heptagon:**

1.  **Geometry:**
    *   A regular heptagon (7 sides).
    *   Centered at the canvas origin (400, 400).
    *   Circumradius (distance from center to any vertex): 300 pixels. This ensures it's large enough.
    *   Line Color: White (`#FFFFFF`).
    *   Line Thickness: 2 pixels.

2.  **Rotation:**
    *   The heptagon spins around its center.
    *   Rotation Speed: 360 degrees every 5 seconds (72 degrees per second).
    *   Initial Orientation: One vertex pointing directly upwards (positive Y in math coordinates) at t=0.

**III. Balls (20 instances):**

1.  **Appearance:**
    *   Quantity: 20 balls.
    *   Radius: All balls have a radius of 15 pixels.
    *   Colors: Use the provided list of 20 hex color codes sequentially for balls 1 to 20:
        `['#f8b862', '#f6ad49', '#f39800', '#f08300', '#ec6d51', '#ee7948', '#ed6d3d', '#ec6800', '#ec6800', '#ee7800', '#eb6238', '#ea5506', '#ea5506', '#eb6101', '#e49e61', '#e45e32', '#e17b34', '#dd7a56', '#db8449', '#d66a35']`
    *   Numbering: Each ball should display its number (1 to 20) at its center.
        *   Font: A clear, system-default sans-serif font (e.g., "Arial" or "Helvetica").
        *   Font Size: Approximately 10-12 points (choose one that fits well).
        *   Font Color: Black (`#000000`) for good contrast with the ball colors.
        *   The number *must* rotate with the ball to visually indicate its spin. Tkinter's `create_text` has an `angle` option.

2.  **Initial State:**
    *   All balls start at the exact center of the heptagon (canvas origin).
    *   Initial linear velocity: (0, 0) for all balls.
    *   Initial angular velocity: 0 rad/s for all balls.
    *   Initial angular orientation (for the number): 0 degrees.

3.  **Physical Properties (Uniform for all balls):**
    *   Mass (`m`): 1.0 (arbitrary units, as long as consistent).
    *   Moment of Inertia (for a solid sphere, `I`): `(2/5) * m * radius^2`.

**IV. Physics Engine:**

1.  **Gravity:**
    *   Acceleration due to gravity (`g`): `9.8 * 50` pixels/sÂ². (The factor of 50 scales pixel units to look reasonable). Acts in the negative Y direction (downwards).

2.  **Ball-Wall Collisions:**
    *   **Detection:**
        *   The heptagon's walls are line segments. The vertices of the heptagon rotate. Calculate current world coordinates of vertices at each frame.
        *   For each ball, detect collision with each of the 7 walls.
        *   A collision occurs if the perpendicular distance from the ball's center to a wall line segment is less than or equal to the ball's radius, AND the projection of the ball's center onto the line lies within the segment's endpoints (or if the ball is colliding with a vertex).
        *   Penetration Resolution: If a ball penetrates a wall, move it back along the collision normal so it's just touching the wall.
    *   **Response:**
        *   Coefficient of Restitution (`e_wall`): 0.7. This controls bounciness.
        *   Collision Normal (`n`): Vector perpendicular to the wall, pointing outwards from the wall.
        *   Decomposition of velocity (`v`) into normal (`v_n`) and tangential (`v_t`) components.
        *   New normal velocity: `v_n' = -e_wall * v_n`.
        *   Friction (Kinetic): Coefficient of kinetic friction (`mu_k_wall`): 0.2.
            *   Sliding velocity (`v_slide_wall`) at contact point: `v_t + angular_velocity * radius`. (Vector pointing along the wall tangent).
            *   Impulse due to friction opposes sliding. This impulse changes both `v_t` and `angular_velocity`.
            *   Frictional impulse magnitude: `J_f = mu_k_wall * J_n` where `J_n` is the normal impulse `m * (v_n' - v_n)`.
            *   Change in tangential velocity: `delta_v_t = -J_f / m` (in direction opposing `v_slide_wall`).
            *   Change in angular velocity: `delta_omega = -(radius * J_f_tangential_component) / I` (where `J_f_tangential_component` is the component of `J_f` that causes torque). More simply, the tangential impulse `J_f` acts at distance `radius` from the center, so torque `tau = radius * J_f`. Angular impulse is `tau * dt_collision_contact` (this is tricky; better to use impulse-momentum for angular motion: `I * delta_omega = radius * J_f`).
            *   Ensure friction doesn't reverse the direction of sliding within the single collision response step; it can only bring it to zero.

3.  **Ball-Ball Collisions:**
    *   **Detection:**
        *   For every pair of balls (i, j), calculate the distance between their centers.
        *   Collision if `distance(center_i, center_j) < radius_i + radius_j` (which is `2 * ball_radius` here).
        *   Penetration Resolution: If balls penetrate, move them apart along the line connecting their centers until they are just touching. Distribute the correction movement based on their masses (equally if masses are equal).
    *   **Response (2D Elastic/Inelastic Collisions with Friction):**
        *   Coefficient of Restitution (`e_ball`): 0.8.
        *   Collision Normal (`n`): Unit vector along the line connecting centers (e.g., from ball_i to ball_j).
        *   Tangential Normal (`t`): Unit vector perpendicular to `n`.
        *   Resolve velocities of both balls into components along `n` and `t`.
        *   **Normal Component Response:** Standard 1D collision formulas for `v_in` and `v_jn` (velocities of ball i and j along `n`):
            *   `v_in' = (m_i*v_in + m_j*v_jn + m_j*e_ball*(v_jn - v_in)) / (m_i + m_j)`
            *   `v_jn' = (m_i*v_in + m_j*v_jn + m_i*e_ball*(v_in - v_jn)) / (m_i + m_j)`
            *   (Since masses are equal, `m_i = m_j = m`, this simplifies).
        *   **Tangential Component Response (Friction):**
            *   Coefficient of kinetic friction (`mu_k_ball`): 0.1.
            *   Relative tangential velocity (sliding velocity at contact point) considering spin:
                `v_slide_ball = (v_it - angular_velocity_i * radius) - (v_jt - angular_velocity_j * radius)`
            *   Impulse due to friction opposes this relative sliding.
            *   Normal impulse `J_n = m_i * (v_in' - v_in)` (or `m_j * (v_jn' - v_jn)`, magnitude should be same).
            *   Frictional impulse magnitude `J_f = mu_k_ball * abs(J_n)`.
            *   Apply `J_f` to change tangential velocities and angular velocities of *both* balls, in opposite directions for `v_t` and opposite torque directions.
                *   `delta_v_it = -J_f / m_i` (in direction opposing ball i's contribution to `v_slide_ball`)
                *   `delta_v_jt = +J_f / m_j` (in direction opposing ball j's contribution to `v_slide_ball`)
                *   `delta_omega_i = -(radius * J_f_tangential_component_on_i) / I_i`
                *   `delta_omega_j = -(radius * J_f_tangential_component_on_j) / I_j`
            *   Again, ensure friction doesn't reverse the direction of relative tangential sliding.

4.  **Impact Bounce Height Constraint:**
    *   "Impact bounce height will not exceed the radius of the heptagon, but higher than ball radius."
    *   This is primarily managed by the coefficient of restitution (`e_wall`). Given the gravity and `e_wall`, the bounce height `h_bounce = e_wall^2 * h_drop`.
    *   If a ball drops from near the center to the bottom edge (approx. `heptagon_radius * cos(pi/14)` which is roughly `heptagon_radius`), then `h_bounce` should be `< heptagon_radius`.
    *   So, `e_wall^2 * heptagon_radius < heptagon_radius` implies `e_wall < 1` (which 0.7 is).
    *   And `e_wall^2 * h_drop > ball_radius`. This should generally hold true with the chosen `e_wall` and `g` for most impacts. No explicit capping of velocity is needed if `e_wall` is well-chosen.

5.  **Numerical Integration (Euler Integration):**
    *   For each ball, in each time step `dt`:
        *   Update angular position: `ball.angle += ball.angular_velocity * dt`
        *   Update velocity: `ball.velocity.y -= gravity_y * dt` (gravity)
        *   Update position: `ball.position += ball.velocity * dt`

**V. Implementation Structure Suggestions:**

1.  **Vector2D Class/Dataclass:**
    *   For positions, velocities, forces.
    *   Support basic vector operations: addition, subtraction, scalar multiplication, dot product, magnitude, normalization.

2.  **Ball Class/Dataclass:**
    *   Attributes: `id` (1-20), `position` (Vector2D), `velocity` (Vector2D), `angular_velocity` (float, rad/s), `angle` (float, radians or degrees for drawing), `radius`, `mass`, `inertia`, `color`, `tk_oval_id`, `tk_text_id`.
    *   Methods: `update(dt)`, `draw(canvas)`.

3.  **Heptagon Class/Dataclass:**
    *   Attributes: `center` (Vector2D), `circumradius`, `current_angle_rad` (rotation), `vertices_model` (vertices relative to its center, before rotation), `tk_polygon_id`.
    *   Methods: `update_rotation(dt)`, `get_world_vertices()`, `get_wall_segments()`, `draw(canvas)`.

4.  **Main Application Class:**
    *   Manages the canvas, list of balls, heptagon object.
    *   Contains the main loop (`update_simulation` and `redraw_canvas`).
    *   Handles physics steps: applying gravity, collision detection and response.

**VI. Main Loop Logic:**

1.  `initialize()`:
    *   Setup Tkinter window and canvas.
    *   Create Heptagon instance.
    *   Create 20 Ball instances.
    *   Start the animation loop.

2.  `animation_loop()` (called repeatedly via `canvas.after()`):
    *   Calculate `dt` (can be fixed if FPS is stable).
    *   `update_simulation(dt)`:
        *   Update heptagon rotation.
        *   For each ball:
            *   Apply gravity to `ball.velocity`.
        *   Handle Ball-Wall Collisions:
            *   Iterate through each ball and each heptagon wall.
            *   Detect and resolve collisions (positional correction, velocity update including friction and restitution).
        *   Handle Ball-Ball Collisions:
            *   Iterate through unique pairs of balls.
            *   Detect and resolve collisions (positional correction, velocity update including friction and restitution).
        *   For each ball:
            *   Update `ball.position` using its (potentially modified) `ball.velocity`.
            *   Update `ball.angle` using its (potentially modified) `ball.angular_velocity`.
    *   `redraw_canvas()`:
        *   Clear previous drawings (or update item coordinates).
        *   Draw heptagon.
        *   Draw each ball (circle and its rotated number).
    *   Schedule next call to `animation_loop`.

**VII. Important Considerations & Tips:**

*   **Collision Iterations:** For a stable simulation with multiple objects, you might need to run the collision detection and response steps multiple times per frame (sub-steps or iterations) to resolve complex pile-ups or rapid-succession collisions. Start with one pass and see.
*   **Floating Point Precision:** Be mindful of floating point inaccuracies, especially in comparisons. Use small epsilon values if needed.
*   **Debugging:** Print states (positions, velocities) frequently during development. Visual debugging (e.g., drawing collision normals) can be very helpful.
*   **Modularity:** Keep physics calculations separate from drawing logic as much as possible.
*   **Optimization:**
    *   Broad-phase collision detection (e.g., a simple bounding box check for the entire group of balls against the heptagon) is not strictly necessary for only 20 balls but is good practice for larger systems.
    *   For ball-ball, checking N*(N-1)/2 pairs is fine for 20 balls.
*   **Vector Math with NumPy:** While `numpy` is allowed, if you create a custom `Vector2D` class, it might be more intuitive for geometric operations. `numpy` could be useful for batch operations if you structure your data appropriately, but for 20 distinct objects with individual interactions, a class-based approach is often clearer. You can use `numpy` arrays within your `Vector2D` class if desired.

This detailed prompt should provide a solid foundation for implementing the simulation.
Remember to handle the tkinter coordinate system (Y down) vs. physics coordinate system (Y up) carefully, especially for gravity and drawing.
